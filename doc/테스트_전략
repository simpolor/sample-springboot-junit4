#테스트 전략

##테스트 전략 테이블
어노테이션	        |설명                       |부모 클래스	        |Bean
@SpringBootTest |통합, 테스트, 전체	           |IntegrationTest	    |Bean 전체
@WebMvcTest	    |단위, 테스트, Mvc 테스트	   |MockApiTest	        |MVC 관련된 Bean
@DataJpaTest	|단위, 테스트, Jpa 테스트	   |RepositoryTest	    |JPA 관련 Bean
None            |단위, 테스트, Service 테스트   |MockTest	        |None
None            |POJO, 도메인 테스트	       |None                |None


##통합테스트
**장점**
모든 Bean을 올리고 테스트를 진행하기 때문에 쉽게 테스트 진행 가능
모든 Bean을 올리고 테스트를 진행하기 때문에 운영환경과 가장 유사하게 테스트 가능
API를 테스트할 경우 요청부터 응답까지 전체적인 테스트 진행 가능
**단점**
모든 Bean을 올리고 테스트를 진행하기 때문에 테스트 시간이 오래 걸림
테스트의 단위가 크기 때문에 테스트 실패시 디버깅이 어려움
외부 API 콜같은 Rollback 처리가 안되는 테스트 진행을 하기 어려움


##서비스 테스트
**장점**
진행하고자 하는 테스트에만 집중할 수 있습니다.
테스트 진행시 중요 관점이 아닌 것들은 Mocking 처리해서 외부 의존성들을 줄일 수 있습니다.
예를 들어 주문 할인 로직이 제대로 동작하는지에 대한 테스트만 진행하지 이게 실제로 데이터베이스에 insert되는지는 해당 테스트의 관심사가 아닙니다.
테스트 속도가 빠릅니다.
**단점**
의존성 있는 객체를 Mocking 하기 때문에 문제가 완결된 테스트는 아닙니다.
Mocking 하기가 귀찮습니다.
Mocking 라이브러리에 대한 학습 비용이 발생합니다.


##Mock API 테스트
**장점**
Mock 테스트와 장점은 거의 같습니다.
WebApplication 관련된 Bean들만 등록하기 때문에 통합 테스트보다 빠르게 테스트할 수 있습니다.
통합 테스트를 진행하기 어려운 테스트를 진행합니다.
외부 API 같은 Rollback 처리가 힘들거나 불가능한 테스트를 주로 사용합니다.
예를 들어 외부 결제 모듈 API를 콜하면 안 되는 케이스에서 주로 사용 할 수 있습니다.
이런 문제는 통합 테스트에서 해당 객체를 Mock 객체로 변경해서 테스트를 변경해서 테스트할 수도 있습니다.
**단점**
Mcok 테스트와 다점은 거의 같습니다.
요청부터 응답까지 모든 테스트를 Mock 기반으로 테스트하기 때문에 실제 환경에서는 제대로 동작하지 않을 가능성이 매우 큽니다.


##Repository 테스트
**장점**
Repository 관련된 Bean들만 등록하기 때문에 통합 테스트에 비해서 빠릅니다.
Repository에 대한 관심사만 갖기 때문에 테스트 범위가 작습니다.
**단점**
테스트 범위가 작기 때문에 실제 환경과 차이가 발생합니다.

##POJO 테스트
장점
POJO 객체이므로 테스트하기 편합니다. 외부에서 주입 받을 의존성도 없고 Mocking할 대상도 없습니다.
엔티티 객체는 사용하는 계층이 많으므로 테스트의 효율성이 높습니다.
단점
단점은 없다고 생각합니다. POJO를 테스트 하므로 테스트 속도 및 난도가 낮지만 높은 안전성을 갖게 됩니다.